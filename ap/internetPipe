#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

function usage() {
  echo "USAGE: $(basename $0) [option] <internet_interface> [ip_for_interface interface]"
  echo "  options:"
  echo "     -h|--help               view this help message"
  echo "     -n|--netmask            specify the subnetmask (default: 24)"
  echo "     -l|--leasetime          lease time, will be ignored if -r (default: 1h)"
  echo "     -r|--range              <lower ip,upper ip>"
  echo "                                specify the range for the dhcp, can be"
  echo "                                auto generated if the subnetmask is:"
  echo "                                 24 or 16 or 8 and the ip is IPv4"
  echo "                                (default: autogenerated, READ ABOVE)"
  echo "  <ip for interface>         if range is autogenerated the last digit"
  echo "                             of the ip need to be smaller than 254"
}

PRESIPFORWARD="1"
DELIP="0"
DELRULE="0"

function cleanUP() {
  echo -ne "\n$(date) cleanup...  "
  [ "$PRESIPFORWARD" != "1" ] && (echo "$PRESIPFORWARD" > /proc/sys/net/ipv4/ip_forward || hardDie "could not reset of ipv4/ip_forward")
  for x in $CONFDIR/*.pid; do
    # even if the $CONFDIR is empty, the for loop will assign
    # a value in $x. so we need to check if the value is a file
    [[ -f $x ]] && (kill $(cat $x) || hardDie "could not kill all processes")
  done
  [ "$DELIP" != "0" ] && (ip addr del $IP/$SUBNETMASK dev $IFACE || hardDie "could not delete IP")
  [ "$DELRULE" != "0" ] && (iptables -t nat -D POSTROUTING -o $IIFACE -j MASQUERADE || hardDie "could not delete iptables rule")
  if [ -d "$(pwd)/$IFACE" ]; then
    [ -d "$CONFDIR" ] && [ "$(ls -A $CONFDIR)" ] || (rm -rf "$CONFDIR" || hardDie "could not delete conf folder: $CONFDIR")
    if [ ! "$(ls -A $(pwd)/$IFACE)" ]; then
      if ! rm -rf "$(pwd)/$IFACE"; then
        echo -e "${ORANGE}WARN${NC}\n\t(failed to delete interface folder but it is empty)"
        return
      fi
    fi
  fi
  echo -e "${GREEN}OK${NC}"
}

function die() {
  echo -ne "${RED}FAILED${NC}"
  [ "$1" ] && echo -n " caused by: $1"
  cleanUP
  echo "$(date) stopped script"
  trap "" EXIT
  [ "$1" ] && exit 1 || exit 255
}

function hardDie() {
  echo -e "${RED}FAILED${NC}"
  echo -n "$(date) failed unexpected again"
  [ "$1" ] && echo -n " caused by: $1"
  echo -e "\n\nYou need to manualy cleanup things..."
  echo "  maybe you need to reset ipv4/ip_forwarding"
  echo "  maybe you need to kill processes of pid files in $CONFDIR"
  echo "  maybe you need to delete the ip $IP/$SUBNETMASK of $IFACE"
  echo "  maybe you need to delete the MASQERADE rule of iptables"
  echo "this is orderd by the order of the cleanUP"
  echo " you can view the cause and do everything beginning with that"
  trap "" EXIT
  [ "$1" ] && exit 1 || exit 255
}

function finish() {
  cleanUP
  echo "$(date) stopped script"
  trap "" EXIT
  exit 0
}

#parse args
ARGS=$(getopt -o n:r:l:h -l "leasetime":,"range":,"netmask":,"help" -n $(basename $0) -- "$@") || exit 1
eval set -- "$ARGS"

while :; do
  case "$1" in
    -h|--help)
      usage >&1
      trap "" EXIT
      exit
      ;;
    -n|--netmask)
      shift
      SUBNETMASK="$1"
      shift
      ;;
    -l|--leasetime)
      shift
      LEASTIME="$1"
      shift
      ;;
    -r|--range)
      shift
      RANGE="$1"
      shift
      ;;
    --)
      shift
      break
      ;;
  esac
done

[ "$SUBNETMASK" ] || SUBNETMASK="24"
[ "$LEASTIME" ] || LEASTIME="1h"
IIFACE="$1"
IP="$2"
IFACE="$3"
CONFDIR="$(pwd)/$IFACE/pipe"

#setup
if [ "$(whoami)" = "root" ] && [ "$IIFACE" ] && ip addr show $IIFACE >/dev/null 2>/dev/null; then
  echo "$(date) started srcipt"
  echo -n "$(date) setup...   "
  trap "die" EXIT

  if [ "$IFACE" ]; then
    #mk conf dir
    mkdir -p "$CONFDIR" || die "mk conf dir"

    #validate IP for range auto generation
    if [ ! "$RANGE" ] && echo $IP | grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' >/dev/null 2>&1 && \
      [ $(echo $IP | cut -d . -f 4) -lt "254" ] && \
      (  [ $SUBNETMASK = "24" ] || [ $SUBNETMASK = "16" ] || [ $SUBNETMASK = "8" ] ); then

      #generate range
      RANGE="$(echo $IP | cut -d . -f 1,2,3).$(($(echo $IP | cut -d . -f 4)+1))"
      if [ $SUBNETMASK = "24" ]; then
        RANGE=$RANGE,$(echo $IP | cut -d . -f 1,2,3).254,$LEASTIME
      elif [ $SUBNETMASK = "16" ]; then
        RANGE=$RANGE,$(echo $IP | cut -d . -f 1,2).255.254,$LEASTIME
      else
        RANGE=$RANGE,$(echo $IP | cut -d . -f 1).255.255.254,$LEASTIME
      fi
    elif [ ! "$RANGE" ]; then
      echo -e "${RED}FAILED${NC}"
      echo -e "\tinvalid netmask or ip for auto generation of range"
      usage >&2
      trap "" EXIT
      exit 1
    fi

    #set ip of interface
    ip addr add $IP/$SUBNETMASK dev $IFACE && DELIP="1"

    #start dhcp
    dnsmasq -z -i $IFACE -I lo -a $IP -F $RANGE -x "$CONFDIR/dnsmasq.pid" || die "dnsmasq"
  fi
  #set ip forwarding and masquerading (method: nat)
  PRESIPFORWARD="$(cat /proc/sys/net/ipv4/ip_forward)" || die "ipv4/ip_forward"
  [ "$PRESIPFORWARD" != "1" ] && (echo "1" > /proc/sys/net/ipv4/ip_forward || die "ipv4/ip_forward")
  iptables -t nat -A POSTROUTING -o $IIFACE -j MASQUERADE && DELRULE="1" || die "iptables"

  #setup is now finished => clean exit now
  trap "finish" EXIT
  echo -e "${GREEN}OK${NC}"

  #keep ip on interface => sometimes the ip get lost
  while true; do
    if [ ! "$IFACE" ]; then
      sleep 10000
    elif ! ip addr show $IFACE | grep $IP >/dev/null 2>&1; then
      echo -n "$(date) renewing ip to $IP/$SUBNETMASK...   "
      ip addr add $IP/$SUBNETMASK dev $IFACE || die
      echo -e "${GREEN}OK${NC}"
    else
      sleep 1
    fi
  done
elif [ "$IIFACE" ] && ip addr show $IFACE >/dev/null 2>&1; then
  #run this as root if not a root started
  trap "" EXIT
  if [ "$RANGE" ]; then
    PARAM="$PARAM -r $RANGE"
  fi
  if [ "$LEASTIME" != "1h" ]; then
    PARAM="$PARAM -l $LEASTIME"
  fi
  if [ "$SUBNETMASK" != "24" ]; then
    PARAM="$PARAM -n $SUBNETMASK"
  fi
  echo "running: sudo $0$PARAM $@"
  sudo "$0"$PARAM "$@"
  exit $?
else
  usage >&2
  trap "" EXIT
  exit 1;
fi
