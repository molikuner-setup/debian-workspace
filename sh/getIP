#!/bin/bash

#TODO change to use of getopts

function rearangeArguments() {
  if [ "$3" == "silent" ] && [ "$2" == "checkLeak" ]; then
    echo "$1 $3 $2"
  else
    echo "$@"
  fi
}

function output() {
  if [ "$4" != "silent" ]; then
    echo "Your $2 IP is :"
    echo ""
  fi
  echo "$1"
  if [ "$3" != "noTest" ] && [ "$3" != "errOuter" ]; then
    if [ "$4" != "silent" ]; then
      echo ""
      echo "Your IP $3 leaked!"
    else
      echo "$3"
    fi
  elif [ "$3" == "errOuter" ]; then
    echo "I could not get you IP in the WAN"
    echo "Check your internetconnection!"
  fi
}

function makeRequest() {
  ip=$(curl -si "$1" | grep -iE "\{\"ip\":\"" | grep -oiE '([0-9]{1,3}\.){3}[0-9]')
  echo "$ip"
}

function checkLeak() {
  if [ "$3" == "checkLeak" ] || [ "$2" == "checkLeak" ]; then
    local mayInnerIP=$(makeRequest "http://freegeoip.net/json/")
    if [ "$mayInnerIP" == "$1" ] && [ "$mayInnerIP" != "" ]; then
      if [ "$2" != "silent" ]; then
        local leak="is"
      else
        local leak="true"
      fi
    elif [ "$mayInnerIP" != "" ]; then
      if [ "$2" != "silent" ]; then
        local leak="is not"
      else
        local leak="false"
      fi
    else
      local leak="errOuter"
    fi
  else
    local leak="noTest"
  fi
  echo "$leak"
}

function parseIPOutput() {
  if [ "$1" == "both" ]; then
    local innerIP=$(main "inner" "silent")
    local outerIP=$(main "outer" "silent")
    local leak=$(checkLeak "$innerIP" "$2" "$3")
    output "$innerIP" "inner" "$leak" "$2"
    if [ "$2" != "silent" ]; then
      echo ""
      echo "----------------------"
      echo ""
    fi
    output "$outerIP" "outer" "noTest" "$2"
  elif [ "$1" == "inner" ]; then
    local interface=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)')
    local innerIP=$(ip -4 -o addr show dev "$interface" | awk '{split($4,a,"/");print a[1]}')
    local leak=$(checkLeak "$innerIP" "$2" "$3")
    output "$innerIP" "inner" "$leak" "$2"
  elif [ "$1" == "outer" ]; then
    local outerIP=$(makeRequest "https://freegeoip.net/json/")
    output "$outerIP" "outer" "noTest" "$2"
  fi
}

function outputHelp() {
  echo "Usage: $0 < inner | outer | both | help > [ ARGUMENTS ]"
  echo ""
  echo "This skript gets your IP"
  echo ""
  echo "    inner:     gives the IP in the LAN"
  echo "    outer:     gives the IP in the WAN"
  echo "    both:      gives output of the parameters inner and outer"
  echo ""
  echo "ARGUMENTS:"
  echo ""
  echo "    silent:    gives the IP without text"
  echo "    checkLeak: can be used on the parameter 'inner' and on the parameter 'both'"
  echo "               gives output if the IP of the LAN is leaked to the WAN"
  echo ""
  echo "Examples:"
  echo ""
  echo "$0 inner"
  echo "$0 both silent checkLeak"
  echo "$0 outer silent"

}

function main() {

  if [ "$1" == "" ] || [ "$1" == "help" ]; then
    outputHelp
    exit 0
  elif [ "$1" != "inner" ] && [ "$1" != "outer" ] && [ "$1" != "both" ]; then
    outputHelp
    exit 48
  fi
  if [ "$2" != "" ] && [ "$2" != "silent" ] && [ "$2" != "checkLeak" ]; then
    outputHelp
    exit 52
  fi
# this check was befor implementing the rearagneArguments function
#   (it was nessesary needet to write the silent before the checkLeak)
#  if [ "$2" != "" ]; then
#    if [ "$3" != "" ] && [ "$3" != "checkLeak" ]; then
#      outputHelp
#      exit 56
#    fi
#  fi
  if [ "$3" != "" ] && [ "$3" != "silent" ] && [ "$3" != "checkLeak" ]; then
    outputHelp
    exit 56
  fi
  if [ "$2" == "checkLeak" ] || [ "$3" == "checkLeak" ]; then
    if [ "$1" != "inner" ] && [ "$1" != "both" ]; then
      outputHelp
      exit 60
    fi
  fi
  parseIPOutput $(rearangeArguments "$@")
}

main "$@"
